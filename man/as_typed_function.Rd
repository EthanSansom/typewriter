% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/typed-function.R
\name{as_typed_function}
\alias{as_typed_function}
\title{Type the arguments of an existing function}
\usage{
as_typed_function(.fun, ...)
}
\arguments{
\item{.fun}{\verb{[function]}

A function whose arguments will be typed. If \code{.fun} is already a typed
function, it's previous argument types will be overwritten.}

\item{...}{\verb{[call / alias]}

Type declarations of arguments in \code{.fun}. Each dot must be a named call or
type alias, the name of which corresponds to an argument in \code{.fun}.

For example, we can create a type-strict version of \code{\link[base:paste]{base::paste0()}} like so:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{my_paste0 <- as_typed_function(
 .fun = base::paste0,
 ... = chk::chk_character(),
 collapse = maybe(chk::chk_string(NULL)),
 recycle0 = chk::chk_flag(FALSE)
)
}\if{html}{\out{</div>}}

\code{my_paste0(..., collapse, recycle0)} checks for the following types:
\itemize{
\item Each dot \code{..i} must be a character vector.
\item \code{collapse} is either \code{NULL} (via \link{maybe}) or a string (default is \code{NULL})
\item \code{recycle0} is either \code{TRUE} or \code{FALSE} (default is \code{FALSE}).
}

If these checks pass, then the result of \code{base::paste0(..., collapse, recycle0)}
is returned.}
}
\value{
A typed function.
}
\description{
Type the arguments of an existing function
}
\examples{
\dontshow{if (requireNamespace("chk", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
my_paste0 <- as_typed_function(
 .fun = base::paste0,
 ... = chk::chk_character(),
 collapse = maybe(chk::chk_string(NULL)),
 recycle0 = chk::chk_flag(FALSE)
)
my_paste0("A", "B", "C")
try(my_paste0("A", "B", collapse = 10))

# Typed functions `print()` their typed arguments
print(my_paste0)
\dontshow{\}) # examplesIf}
}
\seealso{
\code{\link[=typed]{typed()}}
}
